name: Deploy Laravel to VPS

on:
  push:
    branches:
      - '*'

jobs:
  deploy:
    name: CI/CD to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            REPO="https://${{ secrets.GIT_TOKEN }}@github.com/Studentalthaf/form-vaksin-RSI.git"
            DIR="${{ secrets.VPS_PATH }}/form-vaksin"
            CONTAINER="laravel_app"
            BRANCH="main"
            echo "Cek git"
            if ! command -v git &>/dev/null; then
              echo "Install git..."
              sudo apt-get update && sudo apt-get install -y git
            fi
            echo "Cek docker"
            if ! command -v docker &>/dev/null; then
              echo "Install docker..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker $USER
            fi
            echo "Cek docker compose"
            if ! docker compose version &>/dev/null; then
              echo "Install docker compose plugin..."
              mkdir -p ~/.docker/cli-plugins
              curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
                -o ~/.docker/cli-plugins/docker-compose
              chmod +x ~/.docker/cli-plugins/docker-compose
            fi
            echo "Clone atau pull repo"
            if [ ! -d "$DIR/.git" ]; then
              echo "Clone repo..."
              git clone --branch $BRANCH $REPO $DIR
            else
              echo "Pull update..."
              cd $DIR
              git reset --hard HEAD
              git pull origin $BRANCH
            fi
            echo "Menyimpan .env untuk Laravel"
            echo "${{ secrets.LARAVEL_ENV }}" > $DIR/.env
            
            echo "Menyiapkan environment variables untuk Docker Compose"
            cd $DIR
            cat > .env.deploy << EOF
            APP_PORT=${{ secrets.APP_PORT }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            EOF
            
            echo "Menghentikan container lama (jika ada)"
            docker compose down || true
            
            echo "Membersihkan container dan network lama"
            docker container prune -f
            docker network prune -f
            
            echo "=== Pre-flight checks ==="
            echo "Checking ports..."
            if sudo lsof -i :${{ secrets.APP_PORT }} 2>/dev/null; then
              echo "⚠️  WARNING: Port ${{ secrets.APP_PORT }} is in use!"
              sudo lsof -i :${{ secrets.APP_PORT }}
            fi
            
            echo "Checking Docker daemon..."
            docker info || (echo "Docker daemon error!" && exit 1)
            
            echo "=== Memulai Docker Compose dengan build ulang ==="
            echo "Building images..."
            if ! docker compose --env-file .env.deploy build --no-cache 2>&1 | tee build.log; then
              echo "❌ ERROR: Docker build failed!"
              echo "=== Build Log ==="
              tail -100 build.log
              exit 1
            fi
            
            echo "Starting containers..."
            if ! docker compose --env-file .env.deploy up -d --remove-orphans 2>&1 | tee start.log; then
              echo "❌ ERROR: Docker compose failed to start!"
              echo "=== Start Log ==="
              cat start.log
              echo "=== Docker Compose Logs ==="
              docker compose logs --tail=100
              echo "=== Checking .env.deploy ==="
              cat .env.deploy
              echo "=== Container Status (all) ==="
              docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              echo "=== Checking for port conflicts ==="
              sudo netstat -tulpn | grep -E ':(80|3307|8080)'
              echo "=== App container logs (if exists) ==="
              docker logs laravel_app --tail 50 2>&1 || echo "Container not created yet"
              echo "=== DB container logs (if exists) ==="
              docker logs laravel_mysql --tail 50 2>&1 || echo "Container not created yet"
              exit 1
            fi
            
            echo "Menunggu database siap..."
            sleep 10
            
            echo "Menunggu container laravel_app siap..."
            CONTAINER_STARTED=false
            for i in {1..30}; do
              if docker ps | grep -q laravel_app; then
                echo "✅ Container laravel_app sudah running!"
                CONTAINER_STARTED=true
                break
              fi
              echo "⏳ Waiting for container to start... ($i/30)"
              sleep 2
            done
            
            # Exit jika container tidak berhasil start
            if [ "$CONTAINER_STARTED" = false ]; then
              echo "❌ ERROR: Container laravel_app gagal start setelah 60 detik!"
              echo "=== Docker Compose Logs ==="
              docker compose logs
              echo "=== Container Status ==="
              docker ps -a
              exit 1
            fi
            
            echo "Verifikasi container"
            docker ps
            
            echo "Menunggu PHP-FPM siap..."
            sleep 5
            
            echo "Install composer dependencies"
            if ! docker exec $CONTAINER composer install --optimize-autoloader --no-dev; then
              echo "❌ ERROR: Composer install failed!"
              docker logs $CONTAINER
              exit 1
            fi
            
            echo "Generate application key"
            if ! docker exec $CONTAINER php artisan key:generate --force; then
              echo "❌ ERROR: Key generation failed!"
              docker logs $CONTAINER
              exit 1
            fi
            
            echo "Run database migrations"
            if ! docker exec $CONTAINER php artisan migrate --force; then
              echo "❌ ERROR: Migration failed!"
              docker logs $CONTAINER
              exit 1
            fi
            
            echo "Clear cache"
            docker exec $CONTAINER php artisan config:clear
            docker exec $CONTAINER php artisan cache:clear
            
            echo "✅ Deployment selesai!"
            echo "=== Running Containers ==="
            docker ps
            echo "=== Application URL ==="
            echo "http://${{ secrets.VPS_HOST }}:${{ secrets.APP_PORT }}"